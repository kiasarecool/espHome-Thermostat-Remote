substitutions:
  esp_name: "ThermoRemote"
esphome:
  name: lcd-menu

esp32:
  board: nodemcu-32s


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "YGWkXM5kk2jVqJjtoZN2XZPE/XNY5uxrOxlzsd70c3Q="

ota:
  password: "0e8fa4f3afb6386390e18b650b24514e"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${esp_name}"
    password: ""

captive_portal:
# A de-bounced GPIO is used to 'click'
binary_sensor:
  - platform: gpio
    name: '${esp_name} click'
    id: 'click'
    pin: 27
    filters:
      - delayed_on: 10ms
      - delayed_off: 10ms
    on_press: 
      - display.page.show_next: my_lcd
    on_double_click:
      - display.page.show_previous: my_lcd
    internal: true
text_sensor:
  - platform: homeassistant
    id: thermo_txt
    entity_id: climate.thermostat

sensor:
  - platform: rotary_encoder
    name: "${esp_name} Rotary Encoder"
    id: thermo_encoder
    pin_a: 17
    pin_b: 16
    resolution: 2
    publish_initial_value: true
    filters:
    - lambda: return x * 0.5;
    on_value:      
      then:
      - delay: 0.2s
      - homeassistant.service:
          service: climate.set_temperature
          data_template:
            
            temperature: !lambda "return id(thermo_encoder).state;"
            entity_id: climate.thermostat
      - homeassistant.service:
          service: climate.set_temp
          data_template:
            temperature: !lambda "return id(thermo_encoder).state;"
            entity_id: climate.thermostat
#        
  - platform: homeassistant
    entity_id: sensor.average_indoor_temperature
    id: avg

  - platform: homeassistant
    id: thermo_target
    entity_id: climate.thermostat
    attribute: temperature
    on_value:
    - sensor.rotary_encoder.set_value:
       id: thermo_encoder
       value: !lambda "return id(thermo_target).state * 2;"

  - platform: homeassistant
    id: thermo_current_temp
    entity_id: climate.thermostat
    attribute: current_temperature
color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
    white: 0%
  - id: my_blue
    red: 0%
    green: 0%
    blue: 100%
    white: 0%
  - id: blue_green
    red: 0%
    green: 50%
    blue: 50%
    white: 5%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
    white: 0%
  - id: purple1
    red: 50%
    green: 0%
    blue: 50%
    white: 5%

spi:
  
  clk_pin: 22
  mosi_pin: 23
  miso_pin: 19
graph:
  - id: my_graph
    duration: 0.5h
    x_grid: 5min
    y_grid: 1.1     # degC/div
    width: 124
    height: 40
    traces:
      - sensor: thermo_current_temp
        line_type: DOTTED
        line_thickness: 3
        color: blue_green
      - sensor: thermo_target
        line_type: SOLID
        line_thickness: 3
        color: my_green

interval: 
  - interval: 30s
    then:
      - if:
          condition:
            wifi.connected:
          then:
            - lambda: |-
                id(wifi_connection) = true;
          else:
            - lambda: |-
                id(wifi_connection) = false;
globals: 
  - id: wifi_connection
    type: bool
    restore_value: no
    initial_value: "false"
time:
  - platform: homeassistant
    id: esptime
#animation:
#  - file: "gif/duck_walk.gif"
#    id: duck
#    resize: 128x128
font:
  - file: 'fonts/arial.ttf'
    id: font1
    size: 18
  - file: "fonts/mdi.ttf"
    id: mdi3
    size: 18
    glyphs: [
      "\U000F0036", #apple finder logo
      "\U000F0035", #apple Logo
      "\U000F0633", #mac key symbol
      "\U000F0039", #safari logo
      "\U000F0A21", #windows 98 flag
      "\U000F05AA", #wifi off
      "\U000F05A9", #wifi
      "\U000F020C", #Facebook
      "\U000F07A6", #Cannabis
      "\U000F166E", #Cannabis off
      "\U000F179B", #Light recessed
      ]
  - file: 'fonts/arial.ttf'
    id: font0
    size: 11
  - file: 'BebasNeue-Regular.ttf'
    id: font2
    size: 36
  - file: 'fonts/arial.ttf'
    id: font3
    size: 14
display:
  - platform: st7735
    model: "INITR_REDTAB"
    id: my_lcd
    reset_pin: 18
    cs_pin: 5
    # a0
    dc_pin: 19

    rotation: 0
    device_width: 128
    device_height: 128
    col_start: 0
    row_start: 0
    eight_bit_color: true
    update_interval: 0.25s
    pages:
#      - id: page1
#        lambda: |-
#          //Ingress shown animation Frame.
#          id(duck).next_frame();
#          // Draw the animation my_animation at position [x=0,y=0]
#          it.image(0, 0, id(duck), COLOR_ON, COLOR_OFF);


          
      - id: page1
        lambda: |-
          it.line(0, 15, 128, 15, id(purple1));
          it.line(83, 15, 83, 0, id(purple1));
          it.line(70, 15, 70, 64, id(purple1));
          it.rectangle(0, 0, 128, 65, id(purple1));
          it.strftime(85, 0, id(font3), id(purple1), "%H:%M", id(esptime).now());
          it.printf(2, 0, id(font0), id(my_blue), "Set to: %s", id(thermo_txt).state.c_str());
          if (id(thermo_current_temp).has_state()) {
          it.printf(2, 50, id(font2), id(my_green), TextAlign::BASELINE_LEFT, "%.1f째", id(thermo_current_temp).state);
          } else {
          it.print(8, 25, id(mdi3), id(my_red), "\U000F05AA");
          }
          // Print label
          it.printf(2, 52, id(font0), id(blue_green), "Thermostat");

          if (id(thermo_target).has_state()) {
          it.printf(124, 18, id(font2), id(my_green), TextAlign::TOP_RIGHT, "%.0f째", id(thermo_target).state);
          } else {
          it.print(75, 25, id(mdi3), id(my_red), "\U000F05AA");
          }
          it.printf(78, 52, id(font0), id(blue_green), "Setpoint");
          
          it.printf(124, 65, id(font2), id(my_green), TextAlign::TOP_RIGHT, "%.0f째", id(thermo_encoder).state);
          it.print(85, 100, id(font0), id(blue_green), "Input");
          it.printf(110, 110, id(mdi3), id(purple1), "%s", id(wifi_connection) ? "\U000F05A9" : "\U000F05AA");
          it.printf(2, 98, id(font2), id(my_green), TextAlign::BASELINE_LEFT, "%.1f째", id(avg).state);
          it.print(2, 100, id(font0), id(blue_green), "Average");
      - id: page2
        lambda: |-
          it.strftime(85, 0, id(font3), id(purple1), "%H:%M", id(esptime).now());
          it.rectangle(0, 0, 128, 128);
          it.graph (2, 85, id(my_graph));
          it.print(28, 55, id(font0), id(my_green), "Setpoint");
          it.print(28, 70, id(font0), id(my_red), "Temperature");

